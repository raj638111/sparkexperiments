
val rdd = sc.parallelize(Seq(
               ("math",    55),
               ("math",    56),
               ("english", 57),
               ("english", 58),
               ("science", 59),
               ("science", 54)))
rdd.collect()

//Default Sorting : Ascending order
val sorted1 = rdd.sortByKey()

//Result
sorted1.collect()

//Custom Sorting : Descending order (using implicit 'Ordering') 
{
   //Let us define an implicit sorting for the method sortByKey()
   //We have used '{' above to limit the scope of the implicit ordering
   implicit val sortIntegersByString = new Ordering[String] {
      override def compare(a: String, b: String) = {
         val result = a.compare(b)
         //We use -ve to sort the key in descending order
         -result
      }
   }                    
   val sorted2 = rdd.sortByKey()
   
   //Result   
   sorted2.collect()
}

//Default Sorting : Descending order (done using the 'ascending' flag argument) 
val sorted3 = rdd.sortByKey(false)

//Result
sorted3.collect()


class OrderedRDDFunctions[K, V, P <: Product2[K, V]] extends Logging with Serializable
Extra functions available on RDDs of (key, value) pairs where the key is sortable through an implicit conversion. They will work with any key type K that has an implicit Ordering[K] in scope. Ordering objects already exist for all of the standard primitive types. Users can also define their own orderings for custom types, or to override the default ordering. The implicit ordering that is in the closest scope will be used.

def sortByKey(ascending: Boolean = true, numPartitions: Int = self.partitions.length): RDD[(K, V)]
Sort the RDD by key, so that each partition contains a sorted range of the elements. Calling collect or save on the resulting RDD will return or output an ordered list of records (in the save case, they will be written to multiple part-X files in the filesystem, in order of the keys).

