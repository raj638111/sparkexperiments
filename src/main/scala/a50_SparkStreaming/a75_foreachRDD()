

Design Pattern
--------------------------------------------------

   #  Error
   
      dstream.foreachRDD { rdd =>
         val connection = createNewConnection()  // executed at the driver
         rdd.foreach { record =>
          connection.send(record) // executed at the worker
        }
      }
      
   #  Highly inefficient
   
   dstream.foreachRDD { rdd =>
     rdd.foreach { record =>
       val connection = createNewConnection()
       connection.send(record)
       connection.close()
     }
   }

   #  Inefficient (Without Connection Pool)
      dstream.foreachRDD { rdd =>
        rdd.foreachPartition { partitionOfRecords =>
          val connection = createNewConnection()
          partitionOfRecords.foreach(record => connection.send(record))
          connection.close()
        }
      }
   #  Efficient (With Connection Pool)
      dstream.foreachRDD { rdd =>
          rdd.foreachPartition { partitionOfRecords =>
             // ConnectionPool is a static, lazily initialized pool of connections
             val connection = ConnectionPool.getConnection()
             partitionOfRecords.foreach(record => connection.send(record))
             ConnectionPool.returnConnection(connection)  // return to the pool for future reuse
         }
      }            